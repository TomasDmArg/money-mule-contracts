/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace MoneyMuleFactory {
      
    export type MilestoneDataStruct = {description: string, fundingAmount: BigNumberish, deadline: BigNumberish, juryWallets: [AddressLike, AddressLike, AddressLike]}

    export type MilestoneDataStructOutput = [description: string, fundingAmount: bigint, deadline: bigint, juryWallets: [string, string, string]] & {description: string, fundingAmount: bigint, deadline: bigint, juryWallets: [string, string, string] }
  
    }

  export interface MoneyMuleFactoryInterface extends Interface {
    getFunction(nameOrSignature: "authorizeJuror" | "authorizedJurors" | "createFundingRound" | "emergencyPause" | "founderRounds" | "getFounderRounds" | "getInvestorRounds" | "getNextRoundId" | "getRoundContract" | "getTotalRounds" | "investorRounds" | "isAuthorizedJuror" | "owner" | "paused" | "recordInvestorParticipation" | "renounceOwnership" | "revokeJuror" | "rounds" | "transferOwnership" | "unpause"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "JurorAuthorized" | "JurorRevoked" | "OwnershipTransferred" | "Paused" | "RoundCreated" | "Unpaused"): EventFragment;

    encodeFunctionData(functionFragment: 'authorizeJuror', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'authorizedJurors', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'createFundingRound', values: [AddressLike, BigNumberish, BigNumberish, MoneyMuleFactory.MilestoneDataStruct[]]): string;
encodeFunctionData(functionFragment: 'emergencyPause', values?: undefined): string;
encodeFunctionData(functionFragment: 'founderRounds', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getFounderRounds', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getInvestorRounds', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getNextRoundId', values?: undefined): string;
encodeFunctionData(functionFragment: 'getRoundContract', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getTotalRounds', values?: undefined): string;
encodeFunctionData(functionFragment: 'investorRounds', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'isAuthorizedJuror', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'recordInvestorParticipation', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'revokeJuror', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'rounds', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'authorizeJuror', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'authorizedJurors', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createFundingRound', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyPause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'founderRounds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getFounderRounds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getInvestorRounds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getNextRoundId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoundContract', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTotalRounds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'investorRounds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isAuthorizedJuror', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recordInvestorParticipation', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeJuror', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rounds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  }

  
    export namespace JurorAuthorizedEvent {
      export type InputTuple = [juror: AddressLike];
      export type OutputTuple = [juror: string];
      export interface OutputObject {juror: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace JurorRevokedEvent {
      export type InputTuple = [juror: AddressLike];
      export type OutputTuple = [juror: string];
      export interface OutputObject {juror: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoundCreatedEvent {
      export type InputTuple = [roundId: BigNumberish, roundContract: AddressLike, founder: AddressLike, token: AddressLike, targetAmount: BigNumberish];
      export type OutputTuple = [roundId: bigint, roundContract: string, founder: string, token: string, targetAmount: bigint];
      export interface OutputObject {roundId: bigint, roundContract: string, founder: string, token: string, targetAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnpausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MoneyMuleFactory extends BaseContract {
    
    connect(runner?: ContractRunner | null): MoneyMuleFactory;
    waitForDeployment(): Promise<this>;

    interface: MoneyMuleFactoryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    authorizeJuror: TypedContractMethod<
      [juror: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    authorizedJurors: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    createFundingRound: TypedContractMethod<
      [token: AddressLike, targetAmount: BigNumberish, fundingDeadline: BigNumberish, milestones: MoneyMuleFactory.MilestoneDataStruct[], ],
      [[bigint, string] & {roundId: bigint, roundContract: string }],
      'nonpayable'
    >
    

    
    emergencyPause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    founderRounds: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getFounderRounds: TypedContractMethod<
      [founder: AddressLike, ],
      [bigint[]],
      'view'
    >
    

    
    getInvestorRounds: TypedContractMethod<
      [investor: AddressLike, ],
      [bigint[]],
      'view'
    >
    

    
    getNextRoundId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getRoundContract: TypedContractMethod<
      [roundId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getTotalRounds: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    investorRounds: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    isAuthorizedJuror: TypedContractMethod<
      [juror: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    recordInvestorParticipation: TypedContractMethod<
      [investor: AddressLike, roundId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    revokeJuror: TypedContractMethod<
      [juror: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    rounds: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    unpause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'authorizeJuror'): TypedContractMethod<
      [juror: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'authorizedJurors'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'createFundingRound'): TypedContractMethod<
      [token: AddressLike, targetAmount: BigNumberish, fundingDeadline: BigNumberish, milestones: MoneyMuleFactory.MilestoneDataStruct[], ],
      [[bigint, string] & {roundId: bigint, roundContract: string }],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'emergencyPause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'founderRounds'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getFounderRounds'): TypedContractMethod<
      [founder: AddressLike, ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getInvestorRounds'): TypedContractMethod<
      [investor: AddressLike, ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getNextRoundId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRoundContract'): TypedContractMethod<
      [roundId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getTotalRounds'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'investorRounds'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'isAuthorizedJuror'): TypedContractMethod<
      [juror: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'recordInvestorParticipation'): TypedContractMethod<
      [investor: AddressLike, roundId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeJuror'): TypedContractMethod<
      [juror: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'rounds'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unpause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'JurorAuthorized'): TypedContractEvent<JurorAuthorizedEvent.InputTuple, JurorAuthorizedEvent.OutputTuple, JurorAuthorizedEvent.OutputObject>;
getEvent(key: 'JurorRevoked'): TypedContractEvent<JurorRevokedEvent.InputTuple, JurorRevokedEvent.OutputTuple, JurorRevokedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Paused'): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
getEvent(key: 'RoundCreated'): TypedContractEvent<RoundCreatedEvent.InputTuple, RoundCreatedEvent.OutputTuple, RoundCreatedEvent.OutputObject>;
getEvent(key: 'Unpaused'): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

    filters: {
      
      'JurorAuthorized(address)': TypedContractEvent<JurorAuthorizedEvent.InputTuple, JurorAuthorizedEvent.OutputTuple, JurorAuthorizedEvent.OutputObject>;
      JurorAuthorized: TypedContractEvent<JurorAuthorizedEvent.InputTuple, JurorAuthorizedEvent.OutputTuple, JurorAuthorizedEvent.OutputObject>;
    

      'JurorRevoked(address)': TypedContractEvent<JurorRevokedEvent.InputTuple, JurorRevokedEvent.OutputTuple, JurorRevokedEvent.OutputObject>;
      JurorRevoked: TypedContractEvent<JurorRevokedEvent.InputTuple, JurorRevokedEvent.OutputTuple, JurorRevokedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
      Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    

      'RoundCreated(uint256,address,address,address,uint256)': TypedContractEvent<RoundCreatedEvent.InputTuple, RoundCreatedEvent.OutputTuple, RoundCreatedEvent.OutputObject>;
      RoundCreated: TypedContractEvent<RoundCreatedEvent.InputTuple, RoundCreatedEvent.OutputTuple, RoundCreatedEvent.OutputObject>;
    

      'Unpaused(address)': TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
      Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    
    };
  }