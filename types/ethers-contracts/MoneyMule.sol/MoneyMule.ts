/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MoneyMuleInterface extends Interface {
    getFunction(nameOrSignature: "VERIFICATION_DELAY" | "cancelFundingRound" | "completeMilestone" | "createFundingRound" | "emergencyPause" | "emergencyRecoverToken" | "fundingRounds" | "getFundingRound" | "getInvestmentAmount" | "getInvestorRounds" | "getLockedTokenAmount" | "getNextMilestoneId" | "getNextRoundId" | "getRoundMilestones" | "getRoundToken" | "invest" | "investorRounds" | "isWhitelisted" | "milestones" | "owner" | "paused" | "releaseFunds" | "renounceOwnership" | "roundMilestones" | "transferOwnership" | "unpause" | "whitelistInvestor" | "withdrawInvalidToken" | "withdrawInvestment"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "FundingRoundCancelled" | "FundingRoundCreated" | "FundsReleased" | "InvalidTokenWithdrawn" | "InvestmentMade" | "InvestmentWithdrawn" | "InvestorWhitelisted" | "MilestoneCompleted" | "OwnershipTransferred" | "Paused" | "Unpaused"): EventFragment;

    encodeFunctionData(functionFragment: 'VERIFICATION_DELAY', values?: undefined): string;
encodeFunctionData(functionFragment: 'cancelFundingRound', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'completeMilestone', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createFundingRound', values: [AddressLike, BigNumberish, BigNumberish, string[], BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'emergencyPause', values?: undefined): string;
encodeFunctionData(functionFragment: 'emergencyRecoverToken', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'fundingRounds', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getFundingRound', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getInvestmentAmount', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'getInvestorRounds', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getLockedTokenAmount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getNextMilestoneId', values?: undefined): string;
encodeFunctionData(functionFragment: 'getNextRoundId', values?: undefined): string;
encodeFunctionData(functionFragment: 'getRoundMilestones', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getRoundToken', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'invest', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'investorRounds', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'isWhitelisted', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'milestones', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'releaseFunds', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'roundMilestones', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
encodeFunctionData(functionFragment: 'whitelistInvestor', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawInvalidToken', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdrawInvestment', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'VERIFICATION_DELAY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelFundingRound', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'completeMilestone', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createFundingRound', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyPause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyRecoverToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'fundingRounds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getFundingRound', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getInvestmentAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getInvestorRounds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getLockedTokenAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getNextMilestoneId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getNextRoundId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoundMilestones', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoundToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'invest', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'investorRounds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isWhitelisted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'milestones', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'releaseFunds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'roundMilestones', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'whitelistInvestor', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawInvalidToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawInvestment', data: BytesLike): Result;
  }

  
    export namespace FundingRoundCancelledEvent {
      export type InputTuple = [roundId: BigNumberish];
      export type OutputTuple = [roundId: bigint];
      export interface OutputObject {roundId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FundingRoundCreatedEvent {
      export type InputTuple = [roundId: BigNumberish, founder: AddressLike, token: AddressLike, targetAmount: BigNumberish, deadline: BigNumberish, milestonesCount: BigNumberish];
      export type OutputTuple = [roundId: bigint, founder: string, token: string, targetAmount: bigint, deadline: bigint, milestonesCount: bigint];
      export interface OutputObject {roundId: bigint, founder: string, token: string, targetAmount: bigint, deadline: bigint, milestonesCount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FundsReleasedEvent {
      export type InputTuple = [milestoneId: BigNumberish, roundId: BigNumberish, amount: BigNumberish];
      export type OutputTuple = [milestoneId: bigint, roundId: bigint, amount: bigint];
      export interface OutputObject {milestoneId: bigint, roundId: bigint, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InvalidTokenWithdrawnEvent {
      export type InputTuple = [user: AddressLike, token: AddressLike, amount: BigNumberish];
      export type OutputTuple = [user: string, token: string, amount: bigint];
      export interface OutputObject {user: string, token: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InvestmentMadeEvent {
      export type InputTuple = [roundId: BigNumberish, investor: AddressLike, amount: BigNumberish];
      export type OutputTuple = [roundId: bigint, investor: string, amount: bigint];
      export interface OutputObject {roundId: bigint, investor: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InvestmentWithdrawnEvent {
      export type InputTuple = [roundId: BigNumberish, investor: AddressLike, amount: BigNumberish];
      export type OutputTuple = [roundId: bigint, investor: string, amount: bigint];
      export interface OutputObject {roundId: bigint, investor: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InvestorWhitelistedEvent {
      export type InputTuple = [roundId: BigNumberish, investor: AddressLike];
      export type OutputTuple = [roundId: bigint, investor: string];
      export interface OutputObject {roundId: bigint, investor: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MilestoneCompletedEvent {
      export type InputTuple = [milestoneId: BigNumberish, roundId: BigNumberish];
      export type OutputTuple = [milestoneId: bigint, roundId: bigint];
      export interface OutputObject {milestoneId: bigint, roundId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnpausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MoneyMule extends BaseContract {
    
    connect(runner?: ContractRunner | null): MoneyMule;
    waitForDeployment(): Promise<this>;

    interface: MoneyMuleInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    VERIFICATION_DELAY: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    cancelFundingRound: TypedContractMethod<
      [roundId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    completeMilestone: TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createFundingRound: TypedContractMethod<
      [token: AddressLike, targetAmount: BigNumberish, deadline: BigNumberish, milestoneDescriptions: string[], milestoneFunding: BigNumberish[], ],
      [bigint],
      'nonpayable'
    >
    

    
    emergencyPause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    emergencyRecoverToken: TypedContractMethod<
      [token: AddressLike, to: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    fundingRounds: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {id: bigint, founder: string, token: string, targetAmount: bigint, currentAmount: bigint, deadline: bigint, status: bigint, createdAt: bigint, milestonesCount: bigint }],
      'view'
    >
    

    
    getFundingRound: TypedContractMethod<
      [roundId: BigNumberish, ],
      [[bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {id: bigint, founder: string, token: string, targetAmount: bigint, currentAmount: bigint, deadline: bigint, status: bigint, createdAt: bigint, milestonesCount: bigint }],
      'view'
    >
    

    
    getInvestmentAmount: TypedContractMethod<
      [roundId: BigNumberish, investor: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getInvestorRounds: TypedContractMethod<
      [investor: AddressLike, ],
      [bigint[]],
      'view'
    >
    

    
    getLockedTokenAmount: TypedContractMethod<
      [token: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getNextMilestoneId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getNextRoundId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getRoundMilestones: TypedContractMethod<
      [roundId: BigNumberish, ],
      [bigint[]],
      'view'
    >
    

    
    getRoundToken: TypedContractMethod<
      [roundId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    invest: TypedContractMethod<
      [roundId: BigNumberish, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    investorRounds: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    isWhitelisted: TypedContractMethod<
      [roundId: BigNumberish, investor: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    milestones: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, string, bigint, bigint, bigint, boolean] & {id: bigint, roundId: bigint, description: string, fundingAmount: bigint, completedAt: bigint, status: bigint, fundsReleased: boolean }],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    releaseFunds: TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    roundMilestones: TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    unpause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    whitelistInvestor: TypedContractMethod<
      [roundId: BigNumberish, investor: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawInvalidToken: TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawInvestment: TypedContractMethod<
      [roundId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'VERIFICATION_DELAY'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'cancelFundingRound'): TypedContractMethod<
      [roundId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'completeMilestone'): TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createFundingRound'): TypedContractMethod<
      [token: AddressLike, targetAmount: BigNumberish, deadline: BigNumberish, milestoneDescriptions: string[], milestoneFunding: BigNumberish[], ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'emergencyPause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'emergencyRecoverToken'): TypedContractMethod<
      [token: AddressLike, to: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'fundingRounds'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {id: bigint, founder: string, token: string, targetAmount: bigint, currentAmount: bigint, deadline: bigint, status: bigint, createdAt: bigint, milestonesCount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getFundingRound'): TypedContractMethod<
      [roundId: BigNumberish, ],
      [[bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {id: bigint, founder: string, token: string, targetAmount: bigint, currentAmount: bigint, deadline: bigint, status: bigint, createdAt: bigint, milestonesCount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getInvestmentAmount'): TypedContractMethod<
      [roundId: BigNumberish, investor: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getInvestorRounds'): TypedContractMethod<
      [investor: AddressLike, ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getLockedTokenAmount'): TypedContractMethod<
      [token: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getNextMilestoneId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getNextRoundId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRoundMilestones'): TypedContractMethod<
      [roundId: BigNumberish, ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getRoundToken'): TypedContractMethod<
      [roundId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'invest'): TypedContractMethod<
      [roundId: BigNumberish, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'investorRounds'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'isWhitelisted'): TypedContractMethod<
      [roundId: BigNumberish, investor: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'milestones'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, string, bigint, bigint, bigint, boolean] & {id: bigint, roundId: bigint, description: string, fundingAmount: bigint, completedAt: bigint, status: bigint, fundsReleased: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'releaseFunds'): TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'roundMilestones'): TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unpause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'whitelistInvestor'): TypedContractMethod<
      [roundId: BigNumberish, investor: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawInvalidToken'): TypedContractMethod<
      [token: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawInvestment'): TypedContractMethod<
      [roundId: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'FundingRoundCancelled'): TypedContractEvent<FundingRoundCancelledEvent.InputTuple, FundingRoundCancelledEvent.OutputTuple, FundingRoundCancelledEvent.OutputObject>;
getEvent(key: 'FundingRoundCreated'): TypedContractEvent<FundingRoundCreatedEvent.InputTuple, FundingRoundCreatedEvent.OutputTuple, FundingRoundCreatedEvent.OutputObject>;
getEvent(key: 'FundsReleased'): TypedContractEvent<FundsReleasedEvent.InputTuple, FundsReleasedEvent.OutputTuple, FundsReleasedEvent.OutputObject>;
getEvent(key: 'InvalidTokenWithdrawn'): TypedContractEvent<InvalidTokenWithdrawnEvent.InputTuple, InvalidTokenWithdrawnEvent.OutputTuple, InvalidTokenWithdrawnEvent.OutputObject>;
getEvent(key: 'InvestmentMade'): TypedContractEvent<InvestmentMadeEvent.InputTuple, InvestmentMadeEvent.OutputTuple, InvestmentMadeEvent.OutputObject>;
getEvent(key: 'InvestmentWithdrawn'): TypedContractEvent<InvestmentWithdrawnEvent.InputTuple, InvestmentWithdrawnEvent.OutputTuple, InvestmentWithdrawnEvent.OutputObject>;
getEvent(key: 'InvestorWhitelisted'): TypedContractEvent<InvestorWhitelistedEvent.InputTuple, InvestorWhitelistedEvent.OutputTuple, InvestorWhitelistedEvent.OutputObject>;
getEvent(key: 'MilestoneCompleted'): TypedContractEvent<MilestoneCompletedEvent.InputTuple, MilestoneCompletedEvent.OutputTuple, MilestoneCompletedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Paused'): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
getEvent(key: 'Unpaused'): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

    filters: {
      
      'FundingRoundCancelled(uint256)': TypedContractEvent<FundingRoundCancelledEvent.InputTuple, FundingRoundCancelledEvent.OutputTuple, FundingRoundCancelledEvent.OutputObject>;
      FundingRoundCancelled: TypedContractEvent<FundingRoundCancelledEvent.InputTuple, FundingRoundCancelledEvent.OutputTuple, FundingRoundCancelledEvent.OutputObject>;
    

      'FundingRoundCreated(uint256,address,address,uint256,uint256,uint256)': TypedContractEvent<FundingRoundCreatedEvent.InputTuple, FundingRoundCreatedEvent.OutputTuple, FundingRoundCreatedEvent.OutputObject>;
      FundingRoundCreated: TypedContractEvent<FundingRoundCreatedEvent.InputTuple, FundingRoundCreatedEvent.OutputTuple, FundingRoundCreatedEvent.OutputObject>;
    

      'FundsReleased(uint256,uint256,uint256)': TypedContractEvent<FundsReleasedEvent.InputTuple, FundsReleasedEvent.OutputTuple, FundsReleasedEvent.OutputObject>;
      FundsReleased: TypedContractEvent<FundsReleasedEvent.InputTuple, FundsReleasedEvent.OutputTuple, FundsReleasedEvent.OutputObject>;
    

      'InvalidTokenWithdrawn(address,address,uint256)': TypedContractEvent<InvalidTokenWithdrawnEvent.InputTuple, InvalidTokenWithdrawnEvent.OutputTuple, InvalidTokenWithdrawnEvent.OutputObject>;
      InvalidTokenWithdrawn: TypedContractEvent<InvalidTokenWithdrawnEvent.InputTuple, InvalidTokenWithdrawnEvent.OutputTuple, InvalidTokenWithdrawnEvent.OutputObject>;
    

      'InvestmentMade(uint256,address,uint256)': TypedContractEvent<InvestmentMadeEvent.InputTuple, InvestmentMadeEvent.OutputTuple, InvestmentMadeEvent.OutputObject>;
      InvestmentMade: TypedContractEvent<InvestmentMadeEvent.InputTuple, InvestmentMadeEvent.OutputTuple, InvestmentMadeEvent.OutputObject>;
    

      'InvestmentWithdrawn(uint256,address,uint256)': TypedContractEvent<InvestmentWithdrawnEvent.InputTuple, InvestmentWithdrawnEvent.OutputTuple, InvestmentWithdrawnEvent.OutputObject>;
      InvestmentWithdrawn: TypedContractEvent<InvestmentWithdrawnEvent.InputTuple, InvestmentWithdrawnEvent.OutputTuple, InvestmentWithdrawnEvent.OutputObject>;
    

      'InvestorWhitelisted(uint256,address)': TypedContractEvent<InvestorWhitelistedEvent.InputTuple, InvestorWhitelistedEvent.OutputTuple, InvestorWhitelistedEvent.OutputObject>;
      InvestorWhitelisted: TypedContractEvent<InvestorWhitelistedEvent.InputTuple, InvestorWhitelistedEvent.OutputTuple, InvestorWhitelistedEvent.OutputObject>;
    

      'MilestoneCompleted(uint256,uint256)': TypedContractEvent<MilestoneCompletedEvent.InputTuple, MilestoneCompletedEvent.OutputTuple, MilestoneCompletedEvent.OutputObject>;
      MilestoneCompleted: TypedContractEvent<MilestoneCompletedEvent.InputTuple, MilestoneCompletedEvent.OutputTuple, MilestoneCompletedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
      Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    

      'Unpaused(address)': TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
      Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    
    };
  }