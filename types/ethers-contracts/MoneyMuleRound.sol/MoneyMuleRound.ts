/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace MoneyMuleFactory {
      
    export type MilestoneDataStruct = {description: string, fundingAmount: BigNumberish, deadline: BigNumberish, juryWallets: [AddressLike, AddressLike, AddressLike]}

    export type MilestoneDataStructOutput = [description: string, fundingAmount: bigint, deadline: bigint, juryWallets: [string, string, string]] & {description: string, fundingAmount: bigint, deadline: bigint, juryWallets: [string, string, string] }
  
    }

  export interface MoneyMuleRoundInterface extends Interface {
    getFunction(nameOrSignature: "VERIFICATION_DELAY" | "VOTING_PERIOD" | "cancelRound" | "castJuryVote" | "completeMilestone" | "createdAt" | "currentAmount" | "factory" | "finalizeMilestoneVoting" | "founder" | "fundingDeadline" | "getInvestmentAmount" | "getMilestone" | "getRoundInfo" | "getWithdrawableAmount" | "hasJurorVoted" | "invest" | "investments" | "isWhitelisted" | "milestones" | "milestonesCount" | "moveToExecutionPhase" | "phase" | "releaseFunds" | "roundId" | "targetAmount" | "token" | "triggerMilestoneDeadline" | "whitelist" | "whitelistInvestor" | "withdrawInvestment"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "FundsReleased" | "InvestmentMade" | "InvestmentWithdrawn" | "InvestorWhitelisted" | "JuryVoteCast" | "MilestoneCompleted" | "MilestoneDeadlineTriggered" | "MilestoneVotingFinalized" | "PhaseChanged" | "RoundCancelled"): EventFragment;

    encodeFunctionData(functionFragment: 'VERIFICATION_DELAY', values?: undefined): string;
encodeFunctionData(functionFragment: 'VOTING_PERIOD', values?: undefined): string;
encodeFunctionData(functionFragment: 'cancelRound', values?: undefined): string;
encodeFunctionData(functionFragment: 'castJuryVote', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'completeMilestone', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createdAt', values?: undefined): string;
encodeFunctionData(functionFragment: 'currentAmount', values?: undefined): string;
encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
encodeFunctionData(functionFragment: 'finalizeMilestoneVoting', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'founder', values?: undefined): string;
encodeFunctionData(functionFragment: 'fundingDeadline', values?: undefined): string;
encodeFunctionData(functionFragment: 'getInvestmentAmount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getMilestone', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getRoundInfo', values?: undefined): string;
encodeFunctionData(functionFragment: 'getWithdrawableAmount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'hasJurorVoted', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'invest', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'investments', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isWhitelisted', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'milestones', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'milestonesCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'moveToExecutionPhase', values?: undefined): string;
encodeFunctionData(functionFragment: 'phase', values?: undefined): string;
encodeFunctionData(functionFragment: 'releaseFunds', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'roundId', values?: undefined): string;
encodeFunctionData(functionFragment: 'targetAmount', values?: undefined): string;
encodeFunctionData(functionFragment: 'token', values?: undefined): string;
encodeFunctionData(functionFragment: 'triggerMilestoneDeadline', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'whitelist', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'whitelistInvestor', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawInvestment', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'VERIFICATION_DELAY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'VOTING_PERIOD', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelRound', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'castJuryVote', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'completeMilestone', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createdAt', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'currentAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'finalizeMilestoneVoting', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'founder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'fundingDeadline', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getInvestmentAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getMilestone', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoundInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getWithdrawableAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasJurorVoted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'invest', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'investments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isWhitelisted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'milestones', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'milestonesCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'moveToExecutionPhase', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'phase', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'releaseFunds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'roundId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'targetAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'triggerMilestoneDeadline', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'whitelistInvestor', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawInvestment', data: BytesLike): Result;
  }

  
    export namespace FundsReleasedEvent {
      export type InputTuple = [milestoneId: BigNumberish, amount: BigNumberish];
      export type OutputTuple = [milestoneId: bigint, amount: bigint];
      export interface OutputObject {milestoneId: bigint, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InvestmentMadeEvent {
      export type InputTuple = [investor: AddressLike, amount: BigNumberish];
      export type OutputTuple = [investor: string, amount: bigint];
      export interface OutputObject {investor: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InvestmentWithdrawnEvent {
      export type InputTuple = [investor: AddressLike, amount: BigNumberish];
      export type OutputTuple = [investor: string, amount: bigint];
      export interface OutputObject {investor: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InvestorWhitelistedEvent {
      export type InputTuple = [investor: AddressLike];
      export type OutputTuple = [investor: string];
      export interface OutputObject {investor: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace JuryVoteCastEvent {
      export type InputTuple = [milestoneId: BigNumberish, juror: AddressLike, approve: boolean];
      export type OutputTuple = [milestoneId: bigint, juror: string, approve: boolean];
      export interface OutputObject {milestoneId: bigint, juror: string, approve: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MilestoneCompletedEvent {
      export type InputTuple = [milestoneId: BigNumberish];
      export type OutputTuple = [milestoneId: bigint];
      export interface OutputObject {milestoneId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MilestoneDeadlineTriggeredEvent {
      export type InputTuple = [milestoneId: BigNumberish, triggeredBy: AddressLike];
      export type OutputTuple = [milestoneId: bigint, triggeredBy: string];
      export interface OutputObject {milestoneId: bigint, triggeredBy: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MilestoneVotingFinalizedEvent {
      export type InputTuple = [milestoneId: BigNumberish, result: BigNumberish];
      export type OutputTuple = [milestoneId: bigint, result: bigint];
      export interface OutputObject {milestoneId: bigint, result: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PhaseChangedEvent {
      export type InputTuple = [newPhase: BigNumberish];
      export type OutputTuple = [newPhase: bigint];
      export interface OutputObject {newPhase: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoundCancelledEvent {
      export type InputTuple = [];
      export type OutputTuple = [];
      export interface OutputObject {};
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MoneyMuleRound extends BaseContract {
    
    connect(runner?: ContractRunner | null): MoneyMuleRound;
    waitForDeployment(): Promise<this>;

    interface: MoneyMuleRoundInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    VERIFICATION_DELAY: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    VOTING_PERIOD: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    cancelRound: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    castJuryVote: TypedContractMethod<
      [milestoneId: BigNumberish, approve: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    completeMilestone: TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createdAt: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    currentAmount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    factory: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    finalizeMilestoneVoting: TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    founder: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    fundingDeadline: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getInvestmentAmount: TypedContractMethod<
      [investor: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getMilestone: TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [[bigint, string, bigint, bigint, [string, string, string], bigint, bigint, bigint, bigint, bigint, boolean] & {id: bigint, description: string, fundingAmount: bigint, deadline: bigint, juryWallets: [string, string, string], status: bigint, votesFor: bigint, votesAgainst: bigint, votingStartTime: bigint, completedAt: bigint, fundsReleased: boolean }],
      'view'
    >
    

    
    getRoundInfo: TypedContractMethod<
      [],
      [[bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {id: bigint, founderAddr: string, tokenAddr: string, target: bigint, current: bigint, deadline: bigint, currentPhase: bigint, created: bigint, totalMilestones: bigint }],
      'view'
    >
    

    
    getWithdrawableAmount: TypedContractMethod<
      [investor: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    hasJurorVoted: TypedContractMethod<
      [milestoneId: BigNumberish, juror: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    invest: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    investments: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    isWhitelisted: TypedContractMethod<
      [investor: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    milestones: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {id: bigint, description: string, fundingAmount: bigint, deadline: bigint, status: bigint, votesFor: bigint, votesAgainst: bigint, votingStartTime: bigint, completedAt: bigint, fundsReleased: boolean }],
      'view'
    >
    

    
    milestonesCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    moveToExecutionPhase: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    phase: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    releaseFunds: TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    roundId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    targetAmount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    token: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    triggerMilestoneDeadline: TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    whitelist: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    whitelistInvestor: TypedContractMethod<
      [investor: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawInvestment: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'VERIFICATION_DELAY'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'VOTING_PERIOD'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'cancelRound'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'castJuryVote'): TypedContractMethod<
      [milestoneId: BigNumberish, approve: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'completeMilestone'): TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createdAt'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'currentAmount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'factory'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'finalizeMilestoneVoting'): TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'founder'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'fundingDeadline'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getInvestmentAmount'): TypedContractMethod<
      [investor: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getMilestone'): TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [[bigint, string, bigint, bigint, [string, string, string], bigint, bigint, bigint, bigint, bigint, boolean] & {id: bigint, description: string, fundingAmount: bigint, deadline: bigint, juryWallets: [string, string, string], status: bigint, votesFor: bigint, votesAgainst: bigint, votingStartTime: bigint, completedAt: bigint, fundsReleased: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getRoundInfo'): TypedContractMethod<
      [],
      [[bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {id: bigint, founderAddr: string, tokenAddr: string, target: bigint, current: bigint, deadline: bigint, currentPhase: bigint, created: bigint, totalMilestones: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getWithdrawableAmount'): TypedContractMethod<
      [investor: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'hasJurorVoted'): TypedContractMethod<
      [milestoneId: BigNumberish, juror: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'invest'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'investments'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'isWhitelisted'): TypedContractMethod<
      [investor: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'milestones'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {id: bigint, description: string, fundingAmount: bigint, deadline: bigint, status: bigint, votesFor: bigint, votesAgainst: bigint, votingStartTime: bigint, completedAt: bigint, fundsReleased: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'milestonesCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'moveToExecutionPhase'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'phase'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'releaseFunds'): TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'roundId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'targetAmount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'token'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'triggerMilestoneDeadline'): TypedContractMethod<
      [milestoneId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'whitelist'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'whitelistInvestor'): TypedContractMethod<
      [investor: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawInvestment'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'FundsReleased'): TypedContractEvent<FundsReleasedEvent.InputTuple, FundsReleasedEvent.OutputTuple, FundsReleasedEvent.OutputObject>;
getEvent(key: 'InvestmentMade'): TypedContractEvent<InvestmentMadeEvent.InputTuple, InvestmentMadeEvent.OutputTuple, InvestmentMadeEvent.OutputObject>;
getEvent(key: 'InvestmentWithdrawn'): TypedContractEvent<InvestmentWithdrawnEvent.InputTuple, InvestmentWithdrawnEvent.OutputTuple, InvestmentWithdrawnEvent.OutputObject>;
getEvent(key: 'InvestorWhitelisted'): TypedContractEvent<InvestorWhitelistedEvent.InputTuple, InvestorWhitelistedEvent.OutputTuple, InvestorWhitelistedEvent.OutputObject>;
getEvent(key: 'JuryVoteCast'): TypedContractEvent<JuryVoteCastEvent.InputTuple, JuryVoteCastEvent.OutputTuple, JuryVoteCastEvent.OutputObject>;
getEvent(key: 'MilestoneCompleted'): TypedContractEvent<MilestoneCompletedEvent.InputTuple, MilestoneCompletedEvent.OutputTuple, MilestoneCompletedEvent.OutputObject>;
getEvent(key: 'MilestoneDeadlineTriggered'): TypedContractEvent<MilestoneDeadlineTriggeredEvent.InputTuple, MilestoneDeadlineTriggeredEvent.OutputTuple, MilestoneDeadlineTriggeredEvent.OutputObject>;
getEvent(key: 'MilestoneVotingFinalized'): TypedContractEvent<MilestoneVotingFinalizedEvent.InputTuple, MilestoneVotingFinalizedEvent.OutputTuple, MilestoneVotingFinalizedEvent.OutputObject>;
getEvent(key: 'PhaseChanged'): TypedContractEvent<PhaseChangedEvent.InputTuple, PhaseChangedEvent.OutputTuple, PhaseChangedEvent.OutputObject>;
getEvent(key: 'RoundCancelled'): TypedContractEvent<RoundCancelledEvent.InputTuple, RoundCancelledEvent.OutputTuple, RoundCancelledEvent.OutputObject>;

    filters: {
      
      'FundsReleased(uint256,uint256)': TypedContractEvent<FundsReleasedEvent.InputTuple, FundsReleasedEvent.OutputTuple, FundsReleasedEvent.OutputObject>;
      FundsReleased: TypedContractEvent<FundsReleasedEvent.InputTuple, FundsReleasedEvent.OutputTuple, FundsReleasedEvent.OutputObject>;
    

      'InvestmentMade(address,uint256)': TypedContractEvent<InvestmentMadeEvent.InputTuple, InvestmentMadeEvent.OutputTuple, InvestmentMadeEvent.OutputObject>;
      InvestmentMade: TypedContractEvent<InvestmentMadeEvent.InputTuple, InvestmentMadeEvent.OutputTuple, InvestmentMadeEvent.OutputObject>;
    

      'InvestmentWithdrawn(address,uint256)': TypedContractEvent<InvestmentWithdrawnEvent.InputTuple, InvestmentWithdrawnEvent.OutputTuple, InvestmentWithdrawnEvent.OutputObject>;
      InvestmentWithdrawn: TypedContractEvent<InvestmentWithdrawnEvent.InputTuple, InvestmentWithdrawnEvent.OutputTuple, InvestmentWithdrawnEvent.OutputObject>;
    

      'InvestorWhitelisted(address)': TypedContractEvent<InvestorWhitelistedEvent.InputTuple, InvestorWhitelistedEvent.OutputTuple, InvestorWhitelistedEvent.OutputObject>;
      InvestorWhitelisted: TypedContractEvent<InvestorWhitelistedEvent.InputTuple, InvestorWhitelistedEvent.OutputTuple, InvestorWhitelistedEvent.OutputObject>;
    

      'JuryVoteCast(uint256,address,bool)': TypedContractEvent<JuryVoteCastEvent.InputTuple, JuryVoteCastEvent.OutputTuple, JuryVoteCastEvent.OutputObject>;
      JuryVoteCast: TypedContractEvent<JuryVoteCastEvent.InputTuple, JuryVoteCastEvent.OutputTuple, JuryVoteCastEvent.OutputObject>;
    

      'MilestoneCompleted(uint256)': TypedContractEvent<MilestoneCompletedEvent.InputTuple, MilestoneCompletedEvent.OutputTuple, MilestoneCompletedEvent.OutputObject>;
      MilestoneCompleted: TypedContractEvent<MilestoneCompletedEvent.InputTuple, MilestoneCompletedEvent.OutputTuple, MilestoneCompletedEvent.OutputObject>;
    

      'MilestoneDeadlineTriggered(uint256,address)': TypedContractEvent<MilestoneDeadlineTriggeredEvent.InputTuple, MilestoneDeadlineTriggeredEvent.OutputTuple, MilestoneDeadlineTriggeredEvent.OutputObject>;
      MilestoneDeadlineTriggered: TypedContractEvent<MilestoneDeadlineTriggeredEvent.InputTuple, MilestoneDeadlineTriggeredEvent.OutputTuple, MilestoneDeadlineTriggeredEvent.OutputObject>;
    

      'MilestoneVotingFinalized(uint256,uint8)': TypedContractEvent<MilestoneVotingFinalizedEvent.InputTuple, MilestoneVotingFinalizedEvent.OutputTuple, MilestoneVotingFinalizedEvent.OutputObject>;
      MilestoneVotingFinalized: TypedContractEvent<MilestoneVotingFinalizedEvent.InputTuple, MilestoneVotingFinalizedEvent.OutputTuple, MilestoneVotingFinalizedEvent.OutputObject>;
    

      'PhaseChanged(uint8)': TypedContractEvent<PhaseChangedEvent.InputTuple, PhaseChangedEvent.OutputTuple, PhaseChangedEvent.OutputObject>;
      PhaseChanged: TypedContractEvent<PhaseChangedEvent.InputTuple, PhaseChangedEvent.OutputTuple, PhaseChangedEvent.OutputObject>;
    

      'RoundCancelled()': TypedContractEvent<RoundCancelledEvent.InputTuple, RoundCancelledEvent.OutputTuple, RoundCancelledEvent.OutputObject>;
      RoundCancelled: TypedContractEvent<RoundCancelledEvent.InputTuple, RoundCancelledEvent.OutputTuple, RoundCancelledEvent.OutputObject>;
    
    };
  }